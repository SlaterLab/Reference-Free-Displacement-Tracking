clear all
close all
xyScale = 0.1625;
zScale = 0.4;
d = 3;
roiStack = getImages();
[nameTransFile,filePath] = uigetfile('*.tif','Select Transmitted Image for Overlay');
imageTrans = imread([filePath,nameTransFile]);
[nameBinary,filePath] = uigetfile('*.tif','Select Binary Image of Cell');
imageBinary = imread([filePath,nameBinary]);
roiStack=permute(roiStack, [2,1,3]);
imageSize(1,1) = size(roiStack,1)*xyScale;
imageSize(2,1) = size(roiStack,2)*xyScale;
imageSize(3,1) = size(roiStack,3)*zScale;

%%
sumImages = uint16(squeeze(max(permute(roiStack, [3,2,1]))));
sumImgScale = double(max(max(sumImages)))/(65536);
sumImages = uint16(sumImages/sumImgScale);
transImgScale = 65536/mean(prctile(imageTrans,95));
imageTrans = uint16(65536-double((imageTrans*transImgScale)));
transImgScale = 65536/mean(prctile(imageTrans,95));
imageTrans = uint16(double((imageTrans*(transImgScale/2))));
imshow(imageTrans)%invert (should make opaque objects brighter)
sumImages = sumImages+imageTrans; %combine dots and cells
sumImgScale = double(max(max(sumImages)))/65536;
sumImages = uint16(sumImages/sumImgScale);
imshow(sumImages,[]);
hold on
w = msgbox('Select a location with low displacements and double-click to continue');
                waitfor(w);
[~,sumBounds] = imcrop(sumImages);
close

sumBounds(1,3:4) = sumBounds(1,1:2) + sumBounds(1,3:4);
sumBounds(1,5:6) = (sumBounds(1,1:2) + sumBounds(1,3:4))/2;
sumBounds = sumBounds * xyScale;

x = size(roiStack,1);
y = size(roiStack,2);
z = size(roiStack,3);
%% Kilfoil Stack Filter
res=bpass3dMB(roiStack, [1 1 1], [12 12 12],[0 0]);

%% Kilfoil Object Detection 3D
disp('Detecting 3D Centroids')
masscut = mean(prctile(roiStack(:,:,size(roiStack,3)),95));
r=feature3dMB(res, d , [d d 10], [x y z],[1 1 1],5,masscut,.3); %
r(:,1:2) = r(:,1:2)*xyScale;
r(:,3) = r(:,3)*zScale;
disp('done Detecting 3D Centroids')

%% Build Planes Dot by Dot
disp('Building Planes')
clear rNbor
%Set a search window size and establish neighbors
radXY = 2.5; %microns
radZ = .75;
for i = 1:size(r,1)
topX = r(i,1)+ radXY;
botX = r(i,1)- radXY;
topY = r(i,2)+ radXY;
botY = r(i,2)- radXY;
topZ = r(i,3)+ radZ;
botZ = r(i,3)- radZ;
rNbor(i,1:size(find(r(:,1)<topX & r(:,1)>botX & r(:,2)<topY & r(:,2)>botY& r(:,3)<topZ & r(:,3)>botZ))) = find(r(:,1)<topX & r(:,1)>botX & r(:,2)<topY & r(:,2)>botY& r(:,3)<topZ & r(:,3)>botZ);
end
%Grow from starting point until no more plane members are found
clear planesTemp
working = 1;
searched = 1:1:size(r,1);
%start at first row in r
planesTemp(:,1) = rNbor(1,1:nnz(rNbor(1,:)));
planes = planesTemp;
j=1; %designates starting at plane 1
while working == 1
    
    for i = 1:size(planes)
        if ismember(planes(i,1),searched) == 1
            clear new
            searched((planes(i,1)==searched)) = [];
            new(:,1) = rNbor(planes(i,1),1:nnz(rNbor(planes(i,1),:)));
            planesTemp = cat(1,planesTemp,new);
        end
    end
    sBefore = size(planes,1);
    planes = unique(cat(1,planes,planesTemp));
    sAfter = size(planes,1);
    if sBefore == sAfter
        planes2(1:size(planes,1),j) = planes(:,1);
        j=j+1;
        clear planes planesTemp
        for k = 1:size(r,1)
            if ismember(k,searched)==1
                planesTemp(:,1) = rNbor(k,1:nnz(rNbor(k,:)));
                planes = planesTemp;
                searched(searched==k) = [];
                break
            end
            if k == size(r,1)
                working = 0;
            end
        end
    end
end
disp('done Building Planes')
%%
figure
hold on
for i = 1:size(planes2,2)
scatter3(r(planes2(1:nnz(planes2(:,i)),i),1),r(planes2(1:nnz(planes2(:,i)),i),2),r(planes2(1:nnz(planes2(:,i)),i),3))
end
hold off
%%
clear planesFinal
j =1;
for i = 1:size(planes2,2)
    if nnz(planes2(:,i))>50
        planesFinal(1:nnz(planes2(:,i)),j) = planes2(1:nnz(planes2(:,i)),i);
        j=j+1;
    else
        for k = 1:nnz(planes2(:,i))
            r(planes2(k,i),:) =[];
            planes2((planes2>planes2(k,i))) = planes2((planes2>planes2(k,i)))-1;
            planesFinal((planesFinal>planes2(k,i))) = planesFinal((planesFinal>planes2(k,i)))-1;
        end
    end
end
%%
figure
hold on
for i = 1:size(planesFinal,2)
scatter3(r(planesFinal(1:nnz(planesFinal(:,i)),i),1),r(planesFinal(1:nnz(planesFinal(:,i)),i),2),r(planesFinal(1:nnz(planesFinal(:,i)),i),3))
end
hold off
%% Dots in Cell Region
disp('Generating Row Slope')
rNDC = zeros(1,1);
SE = strel('disk',50);
imageBinaryDilated = imerode(imageBinary,SE);
for i = 1:size(r,1)
    %if it is under the cell
    if imageBinaryDilated(round(r(i,2)/xyScale),round(r(i,1)/xyScale))~=0     
        rNDC = cat(1,rNDC,i);
    end
end
rNDC(1,:) = [];
%% Dots in Cropped Region
clear rND rNDB planesND planesNDNNZ planesNDIgnore planesDev neighbors
%ND is non-deformed

sumIndX  = (r(:,1)>sumBounds(1,1) & r(:,1)<sumBounds(1,3));
sumIndY  = (r(:,2)>sumBounds(1,2) & r(:,2)<sumBounds(1,4));
sumIndXY = sumIndX .* sumIndY;
sumIndFinal = find(sumIndXY);
rND = (r(sumIndFinal,1:end));
ignoreCheck = 0;
%Find plane with least fluctuations
for i = 1:size(planesFinal,2)
    planesND(1:nnz(intersect(planesFinal(:,i),sumIndFinal)),i) = intersect(planesFinal(:,i),sumIndFinal);
end
for i = 1:size(planesND,2)
    planesNDNNZ(1,i) = nnz(planesND(:,i));
end
for i = 1:size(planesND,2)
    if nnz(planesND(:,i)) < .5*max(planesNDNNZ)
        ignoreCheck = 1;
        planesNDIgnore(1,i) = 1;
    end
end
if ignoreCheck == 1
planesNDIgnore = (planesNDIgnore==0);
else
    planesNDIgnore = ones(1,size(planesND,2));
end

%Determine best plane for an approximate non-deformed region
for i = 1:size(planesFinal,2)
    planesDev(1,i) = std(r(planesND(1:nnz(planesND(:,i)),i),3));
end
planesDev = planesDev.*planesNDIgnore;
planesBest = find(min(planesDev) == planesDev,1,'first');
rNDB = r(planesND(1:nnz(planesND(:,planesBest)),planesBest),:);



%Find Center dot (likely to have 4 equidistant neighbors)
for i = 1:size(rNDB,1)
differences(i,1) = rNDB(i,1)-sumBounds(1,5);
differences(i,2) = rNDB(i,2)-sumBounds(1,6);
differences(i,4) = sqrt(differences(i,1)^2 + differences(i,2)^2);
end
best = find(differences(:,4)==min(differences(:,4)));

figure
scatter3(rNDB(:,1),rNDB(:,2),rNDB(:,3))
hold on 
scatter3(rNDB(best,1),rNDB(best,2),rNDB(best,3))
hold off
%%
k = 0;
count = 0;
while k == 0
%Find the 4 'equidistant' neighbors
clear differences sortedNew sortedOrig neighbors
for i = 1:size(rNDB,1)
differences(i,1:3) = rNDB(i,1:3)-rNDB(best,1:3);
differences(i,4) = sqrt(differences(i,1)^2 + differences(i,2)^2);
end
[sortedNew, sortedOrig] = sort(differences(:,4));
if std(sortedNew(2:5))<1
neighbors = rNDB(sortedOrig(2:5),:); 
neighbors(1:4,9) = sortedOrig(2:5);
k = 1;
elseif count > 20
    k = 1;
    disp('Could not find a suitable candidate for line fit')
else
newGuess = 2+round(3*rand());
best = sortedOrig(newGuess);
count = count +1;
end

end
%
figure
scatter3(rNDB(:,1),rNDB(:,2),rNDB(:,3))
hold on
scatter3(neighbors(:,1),neighbors(:,2),neighbors(:,3))
scatter3(rNDB(best,1),rNDB(best,2),rNDB(best,3))
hold off
% trckText = strcat('\leftarrow ',trckNum);
% text(lub(nghbrs(i,2),1)-(cntrPt(1,1)-fSizeXmin),lub(nghbrs(i,2),2)-(cntrPt(1,2)-fSizeYmin),lub(nghbrs(i,2),6),trckText,'Color','red')
%                         
%%
m = 15;
figure
scatter3(rNDB(:,1),rNDB(:,2),rNDB(:,3))
hold on
scatter3(rNDB(sortedOrig(1:m,1),1),rNDB(sortedOrig(1:m,1),2),rNDB(sortedOrig(1:m,1),3))
m=10;
scatter3(rNDB(sortedOrig(1:m,1),1),rNDB(sortedOrig(1:m,1),2),rNDB(sortedOrig(1:m,1),3))
m=5;
scatter3(rNDB(sortedOrig(1:m,1),1),rNDB(sortedOrig(1:m,1),2),rNDB(sortedOrig(1:m,1),3))
%scatter(0,0,0)
hold off
%%
% Pair off neighbors
clear differences
for i = 1:4
    for j = 1:4
    differences(j,1:3) = neighbors(i,1:3)-neighbors(j,1:3);    
    differences(j,4) = sqrt(differences(j,1)^2 + differences(j,2)^2 + differences(j,3)^2);
    end
    neighbors(i,10) = find(differences(:,4)==max(differences(:,4)));
end

used = zeros(1,4);
for i = 1:4
    if ismember(i,used)
    else
    dFit{i}(1,1:3) = neighbors(i,1:3);
    dFit{i}(2,1:3) = neighbors(neighbors(i,10),1:3);
    dFit{i}(3,1:3) = rNDB(best,1:3);
    used(i,1) = neighbors(i,10);
    end
end

%%

v1 = (dFit{1}(1,1:2) - dFit{1}(2,1:2))/2;
v2 = (dFit{2}(1,1:2) - dFit{2}(2,1:2))/2;

clear v1row
v1row = best;
for i = 1:2
    dv1 = rNDB(best,1:2);
while (dv1(1,1) < sumBounds(1,3) && dv1(1,1) > sumBounds(1,1) && dv1(1,2) < sumBounds(1,4) && dv1(1,2) > sumBounds(1,2)) == 1
   if i == 1
       clear differences
       dv1 = dv1 + v1;
       dv11(1:size(rNDB,1),1)=dv1(1,1);
       dv11(1:size(rNDB,1),2)=dv1(1,2);
       differences(:,1:2) = (rNDB(:,1:2) - dv11(:,1:2));
       differences(:,3) = sqrt(differences(:,1).^2+differences(:,2).^2);
       [dvSortNew,dvSortOrig] = sort(differences(:,3));
       if dvSortNew(1,1)<8
       v1row = cat(1,v1row,dvSortOrig(1,1));
       end
   else
       clear differences
       dv1 = dv1 + (v1*-1);
       dv11(1:size(rNDB,1),1)=dv1(1,1);
       dv11(1:size(rNDB,1),2)=dv1(1,2);
       differences(:,1:2) = (rNDB(:,1:2) - dv11(:,1:2));
       differences(:,3) = sqrt(differences(:,1).^2+differences(:,2).^2);
       [dvSortNew,dvSortOrig] = sort(differences(:,3));
       if dvSortNew(1,1)<8
       v1row = cat(1,v1row,dvSortOrig(1,1));
       end
   end
end
end

clear v2row
v2row = best;
for i = 1:2
    dv2 = rNDB(best,1:2);
while (dv2(1,1) < sumBounds(1,3) && dv2(1,1) > sumBounds(1,1) && dv2(1,2) < sumBounds(1,4) && dv2(1,2) > sumBounds(1,2)) == 1
   if i == 1
       clear differences
       dv2 = dv2 + v2;
       dv22(1:size(rNDB,1),1)=dv2(1,1);
       dv22(1:size(rNDB,1),2)=dv2(1,2);
       differences(:,1:2) = (rNDB(:,1:2) - dv22(:,1:2));
       differences(:,3) = sqrt(differences(:,1).^2+differences(:,2).^2);
       [dvSortNew,dvSortOrig] = sort(differences(:,3));
       if dvSortNew(1,1)<8
       v2row = cat(1,v2row,dvSortOrig(1,1));
       end
   else
       clear differences
       dv2 = dv2 + (v2*-1);
       dv22(1:size(rNDB,1),1)=dv2(1,1);
       dv22(1:size(rNDB,1),2)=dv2(1,2);
       differences(:,1:2) = (rNDB(:,1:2) - dv22(:,1:2));
       differences(:,3) = sqrt(differences(:,1).^2+differences(:,2).^2);
       [dvSortNew,dvSortOrig] = sort(differences(:,3));
       if dvSortNew(1,1)<8
       v2row = cat(1,v2row,dvSortOrig(1,1));    
       end
   end
end
end
v1row = unique(v1row);
v2row = unique(v2row);

[v1A,v1B] = fitLine3D(rNDB(v1row,1),rNDB(v1row,2),rNDB(v1row,3));
[v2A,v2B] = fitLine3D(rNDB(v2row,1),rNDB(v2row,2),rNDB(v2row,3));

for i=1:size(v1row,1)
    v1row(i,2) = norm(cross(v1B-v1A,rNDB(v1row(i,1),1:3)'-v1A))/norm(v1B-v1A);
end

for i=1:size(v2row,1)
     v2row(i,2) = norm(cross(v2B-v2A,rNDB(v2row(i,1),1:3)'-v2A))/norm(v2B-v2A);
end
v1mean = mean(v1row(:,2));
v2mean = mean(v2row(:,2));
%%
if v1mean<v2mean
    rowV = (v1B-v1A)';
else
    rowV = (v2B-v2A)';
end

    rowV1 = (v1B-v1A)';
    rowV2 = (v2B-v2A)';

disp('done Generating Row Slope')
%%
figure
hold on
plot3([v1A(1) v1B(1)],[v1A(2) v1B(2)],[v1A(3) v1B(3)])
plot3([v2A(1) v2B(1)],[v2A(2) v2B(2)],[v2A(3) v2B(3)])
scatter3(0,0,0)
hold off
%% Display v1row and v2row

figure
hold on
scatter3(rNDB(:,1),rNDB(:,2),rNDB(:,3))
scatter3(rNDB(v1row(:,1),1),rNDB(v1row(:,1),2),rNDB(v1row(:,1),3))
scatter3(rNDB(v2row(:,1),1),rNDB(v2row(:,1),2),rNDB(v2row(:,1),3))
scatter3(0,0,0)
hold off
%% Refine Row Vectors
%Goal here is to verify that the vectors representing horizontal and
%vertical alignment are actually good approximations of the rows they
%represent.

imageBinaryHoriz = (sum(imageBinaryDilated,2))~=max(sum(imageBinaryDilated,2));
imageBinaryVert  = sum(imageBinaryDilated,1)~=max(sum(imageBinaryDilated,1));
imageBinaryBorder = ~kron(imageBinaryVert,imageBinaryHoriz);
figure
imshow(imageBinaryBorder,[])
imageBinaryComp = cat(3,imageBinary,imageBinaryDilated,imageBinaryBorder);
ShowStack(imageBinaryComp)


%%
disp('Building Rows')
[r,rows] = buildRows(r,rowV);

disp('done Building Rows')
%% Attempt to build rows per plane
% for i = 1:size(planesFinal,2)
%     [rCurrent,rowsCurrent] = buildRows(r(planesFinal(1:nnz(planesFinal(:,i)),i)),rowV);
%     rowsPlanesTest(
% end

%% Separate Rows by Plane
clear rowPlanes
for i = 1:size(planesFinal,2)
     clear rVq
rVq(:,1) = r(planesFinal(1:nnz(planesFinal(:,i)),i),1);
rVq(:,2) = r(planesFinal(1:nnz(planesFinal(:,i)),i),2);
rVq = double(rVq);
for j = 1:size(rows,1)
rowPlanes(j,1:size(intersect(rows(j,:),planesFinal(1:nnz(planesFinal(:,i)),i)),1),i) = intersect(rows(j,:),planesFinal(1:nnz(planesFinal(:,i)),i));
end
end
%% Remake rows variable based on plane separation
clear newRows
nRS = find(rowPlanes(:,1,1)>0);
newRows(:,:) = rowPlanes(nRS,:,1);
rowPlanesIdx(1,1) = 1;
rowPlanesIdx(1,2) = size(nRS,1);
for i = 2:size(rowPlanes,3)
    clear currentPlanes
    nRS = find(rowPlanes(:,1,i)>0,1,'first');
    currentPlanes(:,:) =  rowPlanes(find(rowPlanes(:,1,i)>0),:,i);
    rowPlanesIdx(i,1) = size(newRows,1)+1;
    newRows = cat(1,newRows,currentPlanes);
    rowPlanesIdx(i,2) = size(newRows,1);
end
rows = newRows;

%%
for i = 1:size(rows,1)
    for j = 1:size(rows,2)
        if rows(i,j)>0
            r(rows(i,j),8) = i;
        end
    end
end
%%
clear rowsNDCU rowsNDC
rowsNDC = rows;
for i = 1:size(rows,1)
    for j = 1:size(rows,2)
        if ismember(rows(i,j),rNDC) == 0
            rowsNDC(i,j) = 0;
        end
    end
    
    rowsNDC(i,find(rowsNDC(i,:)==0)) = max(rowsNDC(i,:));
    rowsNDCU(i,1:size(unique(rowsNDC(i,:)),2)) = unique(rowsNDC(i,:));
end

%%
disp('Fitting Rows with Row Slope')
clear rowsLines 
for i = 1:size(rowsNDCU,1)
    n = nnz(rowsNDCU(i,:));
    if n >0
    [xyzFinal,rowP] = transLine3D(rowV,r(rowsNDCU(i,1:n),1:3),imageSize);
    rowsLines(1,1:3,i) = xyzFinal-rowV';
    rowsLines(2,1:3,i) = xyzFinal+rowV';
    end
end
disp('done Fitting Rows with Row Slope')

%% Extend the fit Lines passed the edge of the dot area
% Can't believe this was a problem...
boundsX = [0 size(imageBinary,2)*xyScale];
boundsY = [0 size(imageBinary,1)*xyScale];
for i = 1:size(rowsLines,3)
    if dot(rowV,[0 1 0]) > dot(rowV,[1 0 0])   
    t = (boundsY(1,1) - rowsLines(1,2,i))/(rowsLines(2,2,i)-rowsLines(1,2,i));
    rowsLines2(1,1:3,i) = rowsLines(1,1:3,i) + t*(rowsLines(2,1:3,i)-rowsLines(1,1:3,i));
    t = (boundsY(1,2) - rowsLines(2,2,i))/(rowsLines(1,2,i)-rowsLines(2,2,i));
    rowsLines2(2,1:3,i) = rowsLines(2,1:3,i) + t*(rowsLines(1,1:3,i)-rowsLines(2,1:3,i));
    else
    t = (boundsX(1,1) - rowsLines(1,1,i))/(rowsLines(2,1,i)-rowsLines(1,1,i));
    rowsLines2(1,1:3,i) = rowsLines(1,1:3,i) + t*(rowsLines(2,1:3,i)-rowsLines(1,1:3,i));
    t = (boundsX(1,2) - rowsLines(2,1,i))/(rowsLines(1,1,i)-rowsLines(2,1,i));
    rowsLines2(2,1:3,i) = rowsLines(2,1:3,i) + t*(rowsLines(1,1:3,i)-rowsLines(2,1:3,i));
    end
end 



%% Scatter3/Plot3 of Dots/Fits Method 1
figure
hold on
for j = 1:size(rowPlanes,3)
for i = 1:size(rowPlanes,1)
    n = nnz(rowPlanes(i,:,j));
    scatter3(r(rowPlanes(i,1:n,j),1),r(rowPlanes(i,1:n,j),2),r(rowPlanes(i,1:n,j),3))
end


end
for i = 1:size(rowsLines,3)
    plot3([rowsLines(1,1,i) rowsLines(2,1,i)],[rowsLines(1,2,i) rowsLines(2,2,i)],[rowsLines(1,3,i) rowsLines(2,3,i)])
end
scatter3(0,0,0)
%%
rRef = zeros(size(r,1),3);
for i = 1:size(rowsLines,3)
    if nnz(rowsNDCU(i,:))>0
    n = nnz(rows(i,:));
    [xy,distance,t_a] = distance2curve(rowsLines2(:,:,i),r(rows(i,1:n),1:3));
    for j = 1:size(xy,1)
        rRef(rows(i,j),1:3) = xy(j,1:3);
    end
    else
        for j = 1:nnz(rows(i,:))
        rRef(rows(i,j),1:3) = r(rows(i,j),1:3);
        end
    end
end
rDisp = r(:,1:3)-rRef(:,1:3);
%% Quiver Plot
figure
quiver3(rRef(:,1),rRef(:,2),rRef(:,3),rDisp(:,1),rDisp(:,2),rDisp(:,3),0)

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%M
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
rowFits = zeros(size(rows,1),3,2);
for i = 1:size(rows,1)
    if size(intersect(rows(i,:),rNDC),1)>1
   [A,B] = fitLine3D(r(intersect(rows(i,:),rNDC),1),r(intersect(rows(i,:),rNDC),2),r(intersect(rows(i,:),rNDC),3));
   rowFits(i,1:3,1) = A';
   rowFits(i,1:3,2) = B';
    
    elseif size(intersect(rows(i,:),rNDC),1)>0
    [xyzFinal,rowP] = transLine3D(rowV,r(intersect(rows(i,:),rNDC),1:3),imageSize);
    rowFits(i,1:3,1) = xyzFinal'-rowV;
    rowFits(i,1:3,2) = xyzFinal'+rowV;
    else
        i
    end
end
r2 = r;
%%
clear rowFits2
boundsX = [0 size(imageBinary,2)*xyScale];
boundsY = [0 size(imageBinary,1)*xyScale];
for i = 1:size(rowFits,1)
    if dot(rowV,[0 1 0]) < dot(rowV,[1 0 0])   
    t = (boundsY(1,1) - rowFits(i,2,1))/(rowFits(i,2,2)-rowFits(i,2,1));
    rowFits2(i,1:3,1) = rowFits(i,1:3,1) + t*(rowFits(i,1:3,2)-rowFits(i,1:3,1));
    t = (boundsY(1,2) - rowFits(i,2,2))/(rowFits(i,2,1)-rowFits(i,2,2));
    rowFits2(i,1:3,2) = rowFits(i,1:3,2) + t*(rowFits(i,1:3,1)-rowFits(i,1:3,2));
    else
    t = (boundsX(1,1) - rowFits(i,1,1))/(rowFits(i,1,2)-rowFits(i,1,1));
    rowFits2(i,1:3,1) = rowFits(i,1:3,1) + t*(rowFits(i,1:3,2)-rowFits(i,1:3,1));
    t = (boundsX(1,2) - rowFits(i,1,2))/(rowFits(i,1,1)-rowFits(i,1,2));
    rowFits2(i,1:3,2) = rowFits(i,1:3,2) + t*(rowFits(i,1:3,1)-rowFits(i,1:3,2));
    end
end 
rowFits2 = single(rowFits2);
%%
rRef2 = zeros(size(r,1),3);
for i = 1:size(rowFits,1)
    if nnz(rowsNDCU(i,:))>0
    n = nnz(rows(i,:));
    temp = squeeze(rowFits2(i,:,:))';
    [xy,distance,t_a] = distance2curve(temp,r(rows(i,1:n),1:3));
    for j = 1:size(xy,1)
        rRef2(rows(i,j),1:3) = xy(j,1:3);
    end
    else
        for j = 1:nnz(rows(i,:))
        rRef2(rows(i,j),1:3) = r(rows(i,j),1:3);
        end
    end
end
rDisp2 = r(:,1:3)-rRef2(:,1:3);
%% Scatter3/Plot3 of Dots/Fits Method 2
figure
hold on
for j = 1:size(rowPlanes,3)
for i = 1:size(rowPlanes,1)
    n = nnz(rowPlanes(i,:,j));
    scatter3(r(rowPlanes(i,1:n,j),1),r(rowPlanes(i,1:n,j),2),r(rowPlanes(i,1:n,j),3))
end


end
for i = 1:size(rowFits2,1)
    plot3([rowFits2(i,1,1) rowFits2(i,1,2)],[rowFits2(i,2,1) rowFits2(i,2,2)],[rowFits2(i,3,1) rowFits2(i,3,2)])
end
scatter3(0,0,0)
%% Quiver Plot of Displacements Method 2
figure
quiver3(rRef(:,1),rRef(:,2),rRef(:,3),rDisp2(:,1),rDisp2(:,2),rDisp2(:,3),0)
%% 

colorMap2 = brewermap(65536,'*RdGy');
colorBar1 = zeros(500,25);
range = uint16(round(linspace(65536,1,500)'));
for i = 1:25
    colorBar1(1:500,i) = range;
end
colorBar2 = ind2rgb(colorBar1,colorMap2);
for i = 1:10
    colorBar2((i*50)-3:(i*50),13:25,:) = 0;
end
colorBar2(1:3,13:25,:) = 0;

%Save Color Bar Image
close all
colorBarSave = figure;
hold on
imshow(colorBar2);
maxD = 2; % maximum positive/negative values on scale bar in microns
scaleD = 32768/maxD; %scalar for creating heatmap
savefile = [filePath '\HeatMaps\ColorBarZv2.tif'];
    export_fig(colorBarSave,savefile,'-native');
%%
for i = 1:size(planesFinal,2)
    clear rVq

rVq(:,1) = r(planesFinal(1:nnz(planesFinal(:,i)),i),1);
rVq(:,2) = r(planesFinal(1:nnz(planesFinal(:,i)),i),2);
rVq(:,3) = rDisp2(planesFinal(1:nnz(planesFinal(:,i)),i),3);
rVq = double(rVq);
rVq(abs(rVq(:,3))<.2,3) = 0;

% figure 
% scatter3(r(topMarkers,1),r(topMarkers,2),r(topMarkers,3))
    
res = 1;
[xq,yq] = meshgrid(0:res*xyScale:size(imageBinary,2)*xyScale, 0:res*xyScale:size(imageBinary,1)*xyScale);
vq = griddata(rVq(:,1),rVq(:,2),rVq(:,3),xq,yq,'cubic');
disp(num2str(max(max(vq))))
xq2 = linspace(0,size(imageBinary,2)*xyScale,size(vq,2));
yq2 = linspace(0,size(imageBinary,1)*xyScale,size(vq,1));

MaximumHeatMap = imagesc(xq2,yq2,vq);
imageHeat = MaximumHeatMap.CData;
imageHeat(imageHeat>0) = 32768+(abs(imageHeat(imageHeat>0))*scaleD);
imageHeat(imageHeat<0) = 32768 - (abs(imageHeat(imageHeat<0))*scaleD);
imageHeat(imageHeat==0) = 32768;
imageHeat(isnan(imageHeat)) = 32768;
imageHeat = uint16(imageHeat);
imageHeatColor = ind2rgb(imageHeat,colorMap2);

close all
maxHeatMap = figure;
hold on
imshow(imageHeatColor);
savefile = [filePath strcat('HeatMaps\Single\MaximumHeatMapZv2 ',num2str(i),'.tif')];

    export_fig(maxHeatMap,savefile,'-native');
    
    %Save Color Bar Values (depends on vq!)
end
cd HeatMaps
colorBarTxt = fopen('Heat Map Color Bar Values Z v2.txt','wt');
p1Format = 'Tick number %1.0f is %.2f \n';
for i = 1:11
    colorBarValues(i,1) =  round(maxD - ((maxD/5)*(11-i)),2); % round(max(vq(:)) - ((max(vq(:))/10)*(11-i)),2)
    fprintf(colorBarTxt,p1Format,i,colorBarValues(i,1));
end
fclose(colorBarTxt);
cd(filePath)
%% Calculate plane distance from surface
fS = open('fitSurface.mat');
fitSurface = fS.fitSurface{3};
for j = 1:size(planesFinal,2)
for i = 1:nnz(planesFinal(:,j))
    planesLoc(i,j) = (feval(fitSurface,r(planesFinal(i,j),1),r(planesFinal(i,j),2))) - r(planesFinal(i,j),3);
end
end
planesLoc(planesLoc==0)=nan;
planesLoc2 = mean(planesLoc,'omitnan');

cd HeatMaps
planesLocTxt = fopen('Average Z location of planes.txt','wt');
p1Format = 'Plane no. %1.0f is at %.2f microns from the surface \n';
for i = 1:size(planesLoc2,2)
    fprintf(colorBarTxt,p1Format,i,planesLoc2(1,i));
end
fclose(colorBarTxt);
cd(filePath)
%%
figure
hold on
for i = 1:size(planesFinal,2)
scatter3(r(planesFinal(1:nnz(planesFinal(:,i)),i),1),r(planesFinal(1:nnz(planesFinal(:,i)),i),2),r(planesFinal(1:nnz(planesFinal(:,i)),i),3))
end
plot(fitSurface)
hold off

%%
save 3DnormalData
disp('Scipt has Completed')
%% Attempt to interpolate normal displacements in 3D
% rDispFilt = rDisp;
% rDispFilt((rDispFilt<.4 & rDispFilt>-.4))=0;
% 
% meshRes = 2;
% %[xx,yy,zz] = meshgrid(1:meshRes:size(roiStack,1),1:meshRes:size(roiStack,2),1:1:size(roiStack,3));
% [xx,yy,zz] = meshgrid(1:meshRes:imageSize(1,1),1:meshRes:imageSize(2,1),min(r(:,3)):0.2:max(r(:,3)));
% xq = double([xx(:) yy(:) zz(:)]);
% vq = griddatan(rRef(:,1:3),rDispFilt(:,3),xq);
% vq = reshape(vq,size(xx));
% vq(isnan(vq)) = min(min(min(vq)));
% 
% vq2 = vq;
% vq2 = vq2+abs(min(min(min(vq2))));
% vq2Scale = double(65000/max(max(max(vq2))));
% vq2 = uint16(vq2Scale*vq2);
% ShowStack(vq2,1,1)


%%
% close all
% scatter3(rNDB(v1row(:,1),1),rNDB(v1row(:,1),2),rNDB(v1row(:,1),3))
% hold on
% scatter3(rNDB(v2row(:,1),1),rNDB(v2row(:,1),2),rNDB(v2row(:,1),3))
% scatter3(rNDB(best,1),rNDB(best,2),rNDB(best,3))
% scatter3(neighbors(:,1),neighbors(:,2),neighbors(:,3))
% plot3([v1A(1,1),v1B(1,1)],[v1A(2,1),v1B(2,1)],[v1A(3,1),v1B(3,1)])
% plot3([v2A(1,1),v2B(1,1)],[v2A(2,1),v2B(2,1)],[v2A(3,1),v2B(3,1)])

%%
% %%
% clear mask
% mask = find(r(:,3)<20);
% layer = fit([r(mask,1),r(mask,2)],r(mask,3),'lowess','Span',0.005);
% %%
% close all
% %scatter3(r(mask,1),r(mask,2),r(mask,3));
% 
% plot(layer)
% hold on
% scatter3(0,0,0);