function SlaterLab_GUI_v3
    % Create and then hide the GUI as it is being constructed
    h = figure('Position',[50,100,1800,900]);
    data = struct('date',[],...
    'sampleNo',[],...
    'expNo',[],...
    'testNo',[],...
    'gelConc',[],...
    'pi',[],...
    'piAmount',[],...
    'piConc',[],...
    'lightPower',[],...
    'exposureTime',[],...
    'NVP',[],...
    'NVPAmount',[],...
    'NVPConc',[]);
    
    % Construct the components
    
    % GUI Labels
    uicontrol(...
        'Style','text',...
        'String','Date of Experiment:',...
        'Position',[10,525,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Experiment Number:',...
        'Position',[10,500,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Test Number:',...
        'Position',[10,475,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Gel Concentration (%, wt/vol):',...
        'Position',[10,450,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Photoinitiator:',...
        'Position',[10,425,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Photoinitiator Amount:',...
        'Position',[10,400,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Photoinitiator Concentration (mM):',...
        'Position',[10,375,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Power (mW):',...
        'Position',[10,350,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Exposure Time (s):',...
        'Position',[10,325,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','NVP:',...
        'Position',[10,300,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','NVP Amount (uL):',...
        'Position',[10,275,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','NVP Concentration (mM):',...
        'Position',[10,250,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Initial Sample Diameter (mm):',...
        'Position',[10,225,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Gauge Length @ 0 Ext. (mm):',...
        'Position',[10,200,175,25],...
        'HorizontalAlignment','Right');
    uicontrol(...
        'Style','text',...
        'String','Percent Compressive Strain of Interest (%):',...
        'Position',[10,175,175,25],...
        'HorizontalAlignment','Right');
    
    % GUI input
    hDiameter = uicontrol(...
        'Style','edit',...
        'Position',[200,225,50,25]);
    dlgHeight = inputdlg('What was the gauge height at zero extension?','ANSWER DIS, FOOL');
    hHeight = uicontrol(...
        'Style','edit',...
        'String',dlgHeight,...
        'Position',[200,200,50,25]);
    dlgStrain = inputdlg('At which strain (%) do you want the slope?','tell me bby plz');
    hPerStrain = uicontrol(...
        'Style','edit',...
        'String',dlgStrain,...
        'Position',[200,175,50,25]);
    
    % GUI buttons
    uicontrol(...
        'Style','pushbutton',...
        'String','Select File to Analyze',...
        'Position',[10,650,200,25],...
        'Callback',@GetFile_Callback);
    uicontrol(...
        'Style','pushbutton',...
        'String','Redo Analysis',...
        'Position',[10,625,200,25],...
        'Callback',@Recalculate_Callback);
    uicontrol(...
        'Style','pushbutton',...
        'String','Select Excel File to Save Results to',...
        'Position',[10,675,200,25],...
        'Callback',@SetDestination_Callback);
    uicontrol(...
        'Style','pushbutton',...
        'String','Save Data',...
        'Position',[10,600,200,25],...
        'Callback',@SaveData_Callback);
    uicontrol(...
        'Style','pushbutton',...
        'String','Choose Final Fit Point',...
        'Position',[10,100,200,25],...
        'Callback',@ManualFitEnd_Callback);
    data.chosenPoint = [];
    
    % GUI Output
    hForceTime = axes(...
        'Units','Pixels',...
        'Position',[350,500,300,300]);
    hExtensionTime = axes(...
        'Units','Pixels',...
        'Position',[350,100,300,300]);
    hSampleHeight = axes(...
        'Units','Pixels',...
        'Position',[750,500,300,300]);
    hSampleArea = axes(...
        'Units','Pixels',...
        'Position',[750,100,300,300]);
    hStressStrain = axes(...
        'Units','Pixels',...
        'Position',[1150,500,300,300]);
    tableHeader = {'File Path','Date of Experiment','Experiment No.',...
        'Test No.','Gel Concentration (%,wt/vol)','Photoinitiator',...
        'Photoinitiator Amount (mg or uL)',...
        'Photoinitiator Concentration (M)','Light Power (mW)',...
        'Exposure Time (s)','NVP','NVP Amount (uL)',...
        'NVP Concentration (M)','Sample No.','Initial Sample Height (mm)',...
        'Initial Diameter (mm)','Strain of Interest (mm/mm)',...
        'Slope (kPa)','Fit Function'};
    
    hTable = uitable(...
        'Units','Pixels',...
        'Position',[1150,100,600,300],...
        'ColumnName',tableHeader,...
        'CellSelectionCallback',@RowSelection_Callback);
    uicontrol(...
        'Style','pushbutton',...
        'String','Delete Selected Row(s)',...
        'Position',[1150,50,600,25],...
        'Callback',@RowDelete_Callback);
        
    function RowSelection_Callback(h,event)
        % Get indices of selected rows and make them available for other
        % callbacks
        index = event.Indices;
        if any(index)	% Loop necessary to surpress unimportant errors
            rows = index(:,1);
            set(h,'UserData',rows);
        end
    end
    function RowDelete_Callback(~,~)
        selectedRows = get(hTable,'UserData');
        spreadsheet = get(hTable,'Data');
        mask = (1:size(spreadsheet,1))';
        mask(selectedRows) = [];
        spreadsheet = spreadsheet(mask,:);
        set(hTable,'Data',spreadsheet);
    end
    
    % GUI button callbacks
    function GetFile_Callback(~,~)
        [filename,filepath] = uigetfile('*.csv');    
        
        dlgDiameter = inputdlg('What was the initial sample diameter?','PLZ ANSR');
        hDiameter = uicontrol(...
        'Style','edit',...
        'String',dlgDiameter,...
        'Position',[200,225,50,25]);
        
        backslashIdx = regexp(filepath,'\');
        data.guts = filepath(backslashIdx(end-1)+1:end-1);
        spaces = regexp(data.guts,'\s');

        % Info array contains information from filepath
        info = cell(length(spaces)+1,1);
        startIdx = 1;
        for a = 1:length(spaces)
            endIdx = spaces(a) - 1;
            info{a} = data.guts(startIdx:endIdx);
            startIdx = spaces(a) + 1;
        end

        year = info{1,1}(1:4);
        month = info{1,1}(5:6);
        day = info{1,1}(7:8);
        data.date = [year,'-',month,'-',day];

        periodIdx = regexp(data.guts,'\.');
        info{end,1} = data.guts(periodIdx(end)-1);
        data.sampleNo = str2double(info{end,1});

        for a = 2:length(info)-1
            parameter = info{a,1};
            if isempty(regexpi(parameter,'Exp')) == 0
                data.expNo = str2double(parameter(4));
            elseif isempty(regexpi(parameter,'Test')) == 0
                data.testNo = str2double(parameter(5));
            elseif isempty(regexpi(parameter,'%')) == 0
                data.gelConc = str2double(parameter(1:regexpi(parameter,'%')-1));
            elseif isempty(regexpi(parameter,'mg')) == 0
                data.piAmount = str2double(parameter(1:regexpi(parameter,'mg')-1));
            elseif isempty(regexpi(parameter,'EosinY')) == 0 && ...
                    isempty(regexpi(info{a-1,1},'uL')) == 0
                data.pi = parameter;
                data.piAmount = str2double(info{a-1,1}(1:regexpi(info{a-1,1},'uL')-1));
            elseif isempty(regexpi(parameter,'mW')) == 0
                data.lightPower = str2double(parameter(1:regexpi(parameter,'mW')-1));
            elseif isempty(regexpi(parameter,'\ds')) == 0
                if isempty(regexpi(parameter,'m')) == 0
                    minutes = str2double(parameter(1:regexpi(parameter,'m')-1));
                    seconds = str2double(parameter(regexpi(parameter,'m')+1:regexpi(parameter,'s')-1));
                else
                    minutes = 0;
                    seconds = str2double(parameter(1:regexpi(parameter,'s')-1));
                end
                data.exposureTime = minutes*60 + seconds;   % Time in seconds
            elseif isempty(regexpi(parameter,'LAP')) == 0
                data.pi = parameter;
            elseif isempty(regexpi(parameter,'NVP')) == 0 && ...
                    isempty(regexpi(info{a-1,1},'uL')) == 0
                data.NVP = 'True';
                data.NVPAmount = str2double(info{a-1,1}(1:regexpi(info{a-1,1},'uL')-1));
                data.NVPConc = data.NVPAmount*1.043/111.14; % in Molar units, amt in uL
            end
        end

        if isempty(data.pi)
            data.pi = 'EosinY';
            data.piAmount = 10; % uL
        end

        if strcmp(data.pi,'EosinY')
            data.piConc = 0.001*data.piAmount/1000;     % in Molar units, amt in uL
        elseif strcmp(data.pi,'LAP')
            data.piConc = data.piAmount/294.2447;       % in Molar units, amt in mg
        end
        
        uicontrol(...
        'Style','text',...
        'String',data.date,...
        'Position',[200,525,75,25],...
        'HorizontalAlignment','Left');
        
        uicontrol(...
        'Style','text',...
        'String',data.expNo,...
        'Position',[200,500,75,25],...
        'HorizontalAlignment','Left');
    
        uicontrol(...
        'Style','text',...
        'String',data.testNo,...
        'Position',[200,475,75,25],...
        'HorizontalAlignment','Left');
        
        uicontrol(...
        'Style','text',...
        'String',data.gelConc,...
        'Position',[200,450,75,25],...
        'HorizontalAlignment','Left');
        
        uicontrol(...
        'Style','text',...
        'String',data.pi,...
        'Position',[200,425,75,25],...
        'HorizontalAlignment','Left');
    
        uicontrol(...
        'Style','text',...
        'String',data.piAmount,...
        'Position',[200,400,75,25],...
        'HorizontalAlignment','Left');
    
        uicontrol(...
        'Style','text',...
        'String',1000*data.piConc,...
        'Position',[200,375,75,25],...
        'HorizontalAlignment','Left');
    
        uicontrol(...
        'Style','text',...
        'String',data.lightPower,...
        'Position',[200,350,75,25],...
        'HorizontalAlignment','Left');
        
        uicontrol(...
        'Style','text',...
        'String',data.exposureTime,...
        'Position',[200,325,75,25],...
        'HorizontalAlignment','Left');
        
        if strcmp(data.NVP,'True')
            uicontrol(...
            'Style','text',...
            'String',data.NVP,...
            'Position',[200,300,75,25],...
            'HorizontalAlignment','Left');

            uicontrol(...
            'Style','text',...
            'String',data.NVPAmount,...
            'Position',[200,275,75,25],...
            'HorizontalAlignment','Left');

            uicontrol(...
            'Style','text',...
            'String',1000*data.NVPConc,...
            'Position',[200,250,75,25],...
            'HorizontalAlignment','Left');
        end
    
        data.csvfile = cat(2,filepath,'\',filename);
        % Open each .csv file and save the data to the "data" variable
        fileID = fopen(data.csvfile);  % Open file
        % Read data - each .csv column is saved into its own cell array
        data.raw = textscan(fileID,'%q %q %q','Delimiter',',');
        fclose(fileID); % Close file
        % Concatenate data from all three cell arrays into one cell array
        data.raw = [data.raw{1},data.raw{2},data.raw{3}];
        data.raw = data.raw(~all(cellfun(@numel,data.raw)==0,2),:);
        
        data.time = zeros(length(data.raw)-4,1);
        data.extension = zeros(length(data.raw)-4,1);
        data.gelLoad = zeros(length(data.raw)-4,1);
        for c = 5:length(data.raw)
            data.time(c-4,1) = str2double(data.raw{c,1});
            data.extension(c-4,1) = str2double(data.raw{c,2});
            data.gelLoad(c-4,1) = str2double(data.raw{c,3});
        end
        
        set(h,'CurrentAxes',hForceTime)
        plot(data.time,data.gelLoad,'Color','green')
        xlabel('Time (s)')
        ylabel('Force (N)')
        title('Load vs Time')
        
        set(h,'CurrentAxes',hExtensionTime)
        plot(data.time,data.extension,'Color','green')
        xlabel('Time (s)')
        ylabel('Extension (mm)')
        title('Extension vs Time')
        hold on
        data.zeroExtIdx = find(data.extension >= 0,1);
        plot(data.time(data.zeroExtIdx),data.extension(data.zeroExtIdx),...
            '-go','MarkerSize',10,'MarkerEdgeColor','red',...
            'LineWidth',3)
        hold off
        data.iHeight = get(hHeight,'string');
        data.iHeight = str2double(data.iHeight);
        legend('Full Dataset',sprintf('%1.1f mm Grip-to-Grip Distance',data.iHeight),...
            'Location','northwest')
        
        [~,minLoadIdx] = min(data.gelLoad);
        data.time = data.time(minLoadIdx:end);
        data.extension = data.extension(minLoadIdx:end);
        data.gelLoad = data.gelLoad(minLoadIdx:end);
        set(h,'CurrentAxes',hForceTime)
        hold on
        plot(data.time,data.gelLoad,'LineWidth',3,'Color','black')
        hold off
        legend('Full Dataset','Relevant Dataset','Location','northwest')
        
        set(h,'CurrentAxes',hExtensionTime)
        hold on
        plot(data.time(1),data.extension(1),...
            '-ko','MarkerSize',10,'MarkerEdgeColor','blue',...
            'LineWidth',3)
        plot(data.time,data.extension,'LineWidth',3,'Color','black')
        hold off
        legend('Full Dataset',sprintf('%1.1f mm Distance',data.iHeight),...
            'Initial Gel Loading','Relevant Dataset',...
            'Location','northwest')
        
        data.iHeight = get(hHeight,'string');
        data.iHeight = str2double(data.iHeight);
        data.sampleHeight = data.iHeight - data.extension;
        set(h,'CurrentAxes',hSampleHeight)
        plot(data.time,data.sampleHeight)
        xlabel('Time (s)')
        ylabel('Sample Height (mm)')
        title('Sample Height vs Time')
        
        data.iDiameter = get(hDiameter,'string');
        data.iDiameter = str2double(data.iDiameter);
        iSampleArea = pi*data.iDiameter^2/4;
        iSampleHeight = data.sampleHeight(1);
        if isempty(data.iDiameter) == 1
            msgbox('Error! Please input initial sample diameter!')
        else
            data.strain = zeros(size(data.time));
            data.sampleArea = data.strain;
            data.stress = data.strain;
            for a = 1:length(data.time)
                data.strain(a) = (data.sampleHeight(a)-iSampleHeight)/...
                    iSampleHeight;
                data.sampleArea(a) = iSampleArea/(1+data.strain(a));
                data.stress(a) = 1000*data.gelLoad(a)/data.sampleArea(a);
            end
        end
        
        % Fit a curved line of the form y = Ax^2 + Bx + C to the stress vs 
        % strain curve
        [dataFit,~] = polyfit(data.strain,data.stress,2);
        data.C = dataFit(1);
        data.D = dataFit(2);
        data.E = dataFit(3);
        % Define polynomial function using results of fit
        fitFun = @(x) data.C*x.^2 + data.D*x + data.E;
        % X data to be used as input for the fit line (y = Ax^2 + Bx + C)
        % is the strain data
        xFit = data.strain;
        % Input x data to model (y = mx + b) to generate y (stress) data
        yFit = fitFun(xFit);
        % Define derivative (d/dx) of polynomial fit function
        dfitFun = @(x) 2*data.C*x + data.D;
        % Calculate the slope/tangent/derivative of the polynomial fit
        % function at 15% compressive strain
        data.perStrain = -str2double(get(hPerStrain,'string'))/100;
        uicontrol(...
            'Style','text',...
            'String',sprintf('Stiffness at %1.0f%% Strain (kPa):',data.perStrain*100),...
            'Position',[10,150,175,25],...
            'HorizontalAlignment','Right');
        data.slopeDeriv = dfitFun(data.perStrain);
        
        set(h,'CurrentAxes',hSampleArea)
        plot(data.time,data.sampleArea)
        xlabel('Time (s)')
        ylabel('Sample Area (mm^2)')
        title('Sample Area vs Time')
        
        set(h,'CurrentAxes',hStressStrain)
        plot(data.strain,data.stress,'Color','black')
        hold on
        strain15idx = find(data.strain <= data.perStrain,1);
        plot(data.strain(strain15idx),data.stress(strain15idx),...
            '-ko','MarkerSize',10,'MarkerEdgeColor','black',...
            'LineWidth',3)
        plot(xFit,yFit,'Color','blue')
        plot(data.perStrain,fitFun(data.perStrain),...
            '-bo','MarkerSize',10,'MarkerEdgeColor','blue',...
            'LineWidth',3)
        hold off
        xlabel('Strain (mm/mm)')
        ylabel('Stress (kPa)')
        title('Stress vs Strain')
        legend('Stress vs Strain',sprintf('%1.0f%% Strain',data.perStrain*100),'Stress vs Strain - Fit',...
            sprintf('%1.0f%% Strain',data.perStrain*100))

        uicontrol(...
        'Style','text',...
        'String',data.slopeDeriv,...
        'Position',[200,150,75,25],...
        'HorizontalAlignment','Left');
    
        spreadsheet = get(hTable,'Data');
        newSpreadsheet = cat(1,spreadsheet,{data.guts,data.date,...
            data.expNo,data.testNo,data.gelConc,data.pi,data.piAmount,...
            data.piConc,data.lightPower,data.exposureTime,data.NVP,...
            data.NVPAmount,data.NVPConc,data.sampleNo,...
            data.sampleHeight(1),data.iDiameter,data.perStrain,...
            data.slopeDeriv});
        set(hTable,'Data',newSpreadsheet)
        
        guidata(h,data);
    end
    function Recalculate_Callback(~,~)
        data.time = zeros(length(data.raw)-4,1);
        data.extension = zeros(length(data.raw)-4,1);
        data.gelLoad = zeros(length(data.raw)-4,1);
        for c = 5:length(data.raw)
            data.time(c-4,1) = str2double(data.raw{c,1});
            data.extension(c-4,1) = str2double(data.raw{c,2});
            data.gelLoad(c-4,1) = str2double(data.raw{c,3});
        end
        
        set(h,'CurrentAxes',hForceTime)
        plot(data.time,data.gelLoad,'Color','green')
        xlabel('Time (s)')
        ylabel('Force (N)')
        title('Load vs Time')
        
        set(h,'CurrentAxes',hExtensionTime)
        plot(data.time,data.extension,'Color','green')
        xlabel('Time (s)')
        ylabel('Extension (mm)')
        title('Extension vs Time')
        hold on
        data.zeroExtIdx = find(data.extension >= 0,1);
        plot(data.time(data.zeroExtIdx),data.extension(data.zeroExtIdx),...
            '-go','MarkerSize',10,'MarkerEdgeColor','red',...
            'LineWidth',3)
        hold off
        data.iHeight = get(hHeight,'string');
        data.iHeight = str2double(data.iHeight);
        legend('Full Dataset',sprintf('%1.1f mm Grip-to-Grip Distance',data.iHeight),...
            'Location','northwest')
        
        [~,minLoadIdx] = min(data.gelLoad);
        data.time = data.time(minLoadIdx:end);
        data.extension = data.extension(minLoadIdx:end);
        data.gelLoad = data.gelLoad(minLoadIdx:end);
        set(h,'CurrentAxes',hForceTime)
        hold on
        plot(data.time,data.gelLoad,'LineWidth',3,'Color','black')
        hold off
        legend('Full Dataset','Relevant Dataset','Location','northwest')
        
        set(h,'CurrentAxes',hExtensionTime)
        hold on
        plot(data.time(1),data.extension(1),...
            '-ko','MarkerSize',10,'MarkerEdgeColor','blue',...
            'LineWidth',3)
        plot(data.time,data.extension,'LineWidth',3,'Color','black')
        hold off
        legend('Full Dataset',sprintf('%1.1f mm Distance',data.iHeight),...
            'Initial Gel Loading','Relevant Dataset',...
            'Location','northwest')
        
        data.iHeight = get(hHeight,'string');
        data.iHeight = str2double(data.iHeight);
        data.sampleHeight = data.iHeight - data.extension;
        set(h,'CurrentAxes',hSampleHeight)
        plot(data.time,data.sampleHeight)
        xlabel('Time (s)')
        ylabel('Sample Height (mm)')
        title('Sample Height vs Time')
        
        data.iDiameter = get(hDiameter,'string');
        data.iDiameter = str2double(data.iDiameter);
        iSampleArea = pi*data.iDiameter^2/4;
        iSampleHeight = data.sampleHeight(1);
        if isempty(data.iDiameter) == 1
            msgbox('Error! Please input initial sample diameter!')
        else
            data.strain = zeros(size(data.time));
            data.sampleArea = data.strain;
            data.stress = data.strain;
            for a = 1:length(data.time)
                data.strain(a) = (data.sampleHeight(a)-iSampleHeight)/...
                    iSampleHeight;
                data.sampleArea(a) = iSampleArea/(1+data.strain(a));
                data.stress(a) = 1000*data.gelLoad(a)/data.sampleArea(a);
            end
        end
        
        % Fit a curved line of the form y = Ax^2 + Bx + C to the stress vs 
        % strain curve
        [dataFit,~] = polyfit(data.strain,data.stress,2);
        data.C = dataFit(1);
        data.D = dataFit(2);
        data.E = dataFit(3);
        % Define polynomial function using results of fit
        fitFun = @(x) data.C*x.^2 + data.D*x + data.E;
        % X data to be used as input for the fit line (y = Ax^2 + Bx + C)
        % is the strain data
        xFit = data.strain;
        % Input x data to model (y = mx + b) to generate y (stress) data
        yFit = fitFun(xFit);
        % Define derivative (d/dx) of polynomial fit function
        dfitFun = @(x) 2*data.C*x + data.D;
        % Calculate the slope/tangent/derivative of the polynomial fit
        % function at 15% compressive strain
        data.perStrain = -str2double(get(hPerStrain,'string'))/100;
        uicontrol(...
            'Style','text',...
            'String',sprintf('Stiffness at %1.0f%% Strain (kPa):',data.perStrain*100),...
            'Position',[10,150,175,25],...
            'HorizontalAlignment','Right');
        data.slopeDeriv = dfitFun(data.perStrain);
        
        set(h,'CurrentAxes',hSampleArea)
        plot(data.time,data.sampleArea)
        xlabel('Time (s)')
        ylabel('Sample Area (mm^2)')
        title('Sample Area vs Time')
        
        set(h,'CurrentAxes',hStressStrain)
        plot(data.strain,data.stress,'Color','black')
        hold on
        strain15idx = find(data.strain <= data.perStrain,1);
        plot(data.strain(strain15idx),data.stress(strain15idx),...
            '-ko','MarkerSize',10,'MarkerEdgeColor','black',...
            'LineWidth',3)
        plot(xFit,yFit,'Color','blue')
        plot(data.perStrain,fitFun(data.perStrain),...
            '-bo','MarkerSize',10,'MarkerEdgeColor','blue',...
            'LineWidth',3)
        hold off
        xlabel('Strain (mm/mm)')
        ylabel('Stress (kPa)')
        title('Stress vs Strain')
        legend('Stress vs Strain',sprintf('%1.0f%% Strain',data.perStrain*100),'Stress vs Strain - Fit',...
            sprintf('%1.0f%% Strain',data.perStrain*100))

        uicontrol(...
        'Style','text',...
        'String',data.slopeDeriv,...
        'Position',[200,150,75,25],...
        'HorizontalAlignment','Left');
    
        spreadsheet = get(hTable,'Data');
        newSpreadsheet = cat(1,spreadsheet,{data.guts,data.date,...
            data.expNo,data.testNo,data.gelConc,data.pi,data.piAmount,...
            data.piConc,data.lightPower,data.exposureTime,data.NVP,...
            data.NVPAmount,data.NVPConc,data.sampleNo,...
            data.sampleHeight(1),data.iDiameter,data.perStrain,...
            data.slopeDeriv});
        set(hTable,'Data',newSpreadsheet)
    end
    function SetDestination_Callback(~,~)
        [savefile,savepath] = uigetfile({'*.xls';'*.xlsx'});
        data.savefull = cat(2,savepath,'\',savefile);
        % Make Excel spreadsheet with headers:
        % File Path, Date of Experiment, Experiment No., Test No.,
        % Gel Concentration (%,wt/vol), Photoinitiator, 
        % Photoinitiator Amount (mg or uL), 
        % Photoinitiator Concentration (M), Light Power (mW), 
        % Exposure Time (s), NVP, NVP Amount (uL), NVP Concentration (M),
        % Initial Sample Height (mm), Initial Diameter (mm), Slope (kPa)
    end
    function SaveData_Callback(~,~)
        if isempty(data.savefull) == 1
            msgbox('Error! Please Choose a Destination File!');
        else
            [~,~,raw] = xlsread(data.savefull);
            rowWrite = size(raw,1)+2;   %% WORKING?????????????????????? %%
            xlRange = sprintf('%uA',rowWrite);
        
            savedata = get(hTable,'Data');
            
            xlswrite(data.savefull,savedata,1,xlRange);
        end
    end
    function ManualFitEnd_Callback(~,~)
        if isempty(data.chosenPoint) == 0
            delete(data.chosenPoint)
        end
        set(h,'CurrentAxes',hStressStrain)
        data.chosenPoint = impoint;
        chosenPointPos = getPosition(data.chosenPoint);
        [~,newStartIdx] = ...
            min(abs(data.strain-chosenPointPos(1)));

        % Fit a curved line of the form y = Ax^2 + Bx + C to the stress vs 
        % strain curve
        [dataFit,~] = polyfit(data.strain(newStartIdx:end),data.stress(newStartIdx:end),2);
        data.C = dataFit(1);
        data.D = dataFit(2);
        data.E = dataFit(3);
        % Define polynomial function using results of fit
        fitFun = @(x) data.C*x.^2 + data.D*x + data.E;
        % X data to be used as input for the fit line (y = Ax^2 + Bx + C)
        % is the strain data
        xFit = data.strain(newStartIdx:end);
        % Input x data to model (y = mx + b) to generate y (stress) data
        yFit = fitFun(xFit);
        % Define derivative (d/dx) of polynomial fit function
        dfitFun = @(x) 2*data.C*x + data.D;
        % Calculate the slope/tangent/derivative of the polynomial fit
        % function at 15% compressive strain
        data.perStrain = -str2double(get(hPerStrain,'string'))/100;
        uicontrol(...
            'Style','text',...
            'String',sprintf('Stiffness at %1.0f%% Strain (kPa):',data.perStrain*100),...
            'Position',[10,150,175,25],...
            'HorizontalAlignment','Right');
        data.slopeDeriv = dfitFun(data.perStrain);

        set(h,'CurrentAxes',hStressStrain)
        plot(data.strain,data.stress,'Color','black')
        hold on
        strain15idx = find(data.strain <= data.perStrain,1);
        plot(data.strain(strain15idx),data.stress(strain15idx),...
            '-ko','MarkerSize',10,'MarkerEdgeColor','black',...
            'LineWidth',3)
        plot(xFit,yFit,'Color','blue')
        plot(data.perStrain,fitFun(data.perStrain),...
            '-bo','MarkerSize',10,'MarkerEdgeColor','blue',...
            'LineWidth',3)
        hold off
        xlabel('Strain (mm/mm)')
        ylabel('Stress (kPa)')
        title('Stress vs Strain')
        legend('Stress vs Strain',sprintf('%1.0f%% Strain',data.perStrain*100),'Stress vs Strain - Fit',...
            sprintf('%1.0f%% Strain',data.perStrain*100))

        uicontrol(...
        'Style','text',...
        'String',data.slopeDeriv,...
        'Position',[200,150,75,25],...
        'HorizontalAlignment','Left');
    
        spreadsheet = get(hTable,'Data');
        newSpreadsheet = cat(1,spreadsheet,{data.guts,data.date,...
            data.expNo,data.testNo,data.gelConc,data.pi,data.piAmount,...
            data.piConc,data.lightPower,data.exposureTime,data.NVP,...
            data.NVPAmount,data.NVPConc,data.sampleNo,...
            data.sampleHeight(1),data.iDiameter,data.perStrain,...
            data.slopeDeriv});
        set(hTable,'Data',newSpreadsheet)
    end
end